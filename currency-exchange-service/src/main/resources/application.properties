spring.config.import=optional:configserver:http://localhost:8888
spring.application.name=currency-exchange
server.port=8000

spring.jpa.defer-datasource-initialization=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.jpa.show-sql=true

#Below is working in case of docker
eureka.client.serviceUrl.defaultZone=http://naming-server:8761/eureka 

#Below was working when running from intellij
eureka.client.service-url.default-zone=http://naming-server:8761/eureka
eureka.instance.prefer-ip-address=true

#This is for config for sample-api retry max attempts
resilience4j.retry.instances.sample-api.maxAttempts=5
#resilience4j.retry.instances.sample-api.maxRetryAttempts=5 #OLD

#This is for config for sample-api retry wait duration
resilience4j.retry.instances.sample-api.waitDuration=1s

#This is for config for sample-api retry wait duration with wait duration like 1,2,4,8,64 and so on.
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

#break circuit when failure reaches 90%
#@CircuitBreaker(name = "default", fallbackMethod = "hardcodedResponse")
#meaning when 90% of the calls are failing start returning fallbackMethod instead
#resilience4j.circuitbreaker.instances.default.failureRateThreshold=90

#this is for annotation @RateLimiter(name="default") and the below config means
#that for 10 secs there can be only 2 request per period.
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s

#This is default Bulkhead i.e. maximum concurrent calls for any api
resilience4j.bulkhead.instances.default.maxConcurrentCalls=10

#This is for config for sample-api for @Bulkhead(name="sample-api")
resilience4j.bulkhead.instances.sample-api.maxConcurrentCalls=10

management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]